<script setup>
const arrayColores = ['red', 'green', 'yellow'];
const name = 'Vue dinamico :O!!!s';

const arrayFrutas = [
    {
        name: "Manzana",
        price: "$1.00",
        description: "Una manzana",
        stock: 0,
    },
    {
        name: "Pera",
        price: "$2.00",
        description: "Una pera",
        stock: 10,
    },
    {
        name: "Naranja",
        price: "$3.00",
        description: "Una naranja",
        stock: 20,
    },
];
</script>


<template> 
<h1 :style="`color: ${arrayColores[0]}`">Hola, {{ name }}</h1>

<!--v-if v-for juntos-->
<!-- Cuando existen en el mismo nodo, v-if tiene una prioridad más alta que v-for.
Eso significa que la condición v-if no tendrá acceso a las variables del alcance de v-for, por ejemplo-->
<!-- <ul>
  <li v-for="item in arrayFrutas" :key="item.name" v-if="item.stock > 0"> {{ item.name }} - {{ item.price }}</li>
</ul> -->
<!--Al hacer esto nos sale un error, como el v-if tiene mas peso, vue empieza a leer por el if, y la propiedad a la que intenta acceder 
todavia no existe, existe hasta que se ejecuta el v-for, por eso no funciona-->

<!--Solución-->
<!--Tenemos que colocar adentro del v-for el if, para que el v-if tenga acceso a la propiedad, el utilizar el span no es la mejor solución-->
<ul>
  <li v-for="item in arrayFrutas" :key="item.name">
    <span v-if="item.stock > 0">
      {{ item.name }} - {{ item.price }}
    </span>
    </li>
</ul>
<!--El problema de esto es que aparece un li sin nada, esto sucede porque el v-for esta mostrando los elementos independientemente, 
de la condición, y si tiene contenido o no, la condición solo afecta al contenido, mas no al li, otra solución de esto es usar un template,
podemos usar un template dentro de otro-->

<!-- Solución 2 -->

<ul>
  <template v-for="item in arrayFrutas" :key="item.name">
    <li v-if="item.stock > 0">{{ item.name }} - {{ item.price }}</li>
  </template>
</ul>

<!--El template, es un elemento que efectivamente se va a recorrer, iterar, pero no es ningun elemento html, desaparece.
recorrer todo lo que tiene en el interior, pero el li solo se va a mostrar dependiendo de la condición.
En otras palabras estamos haciendo el v-for, pero sobre algo que es transparente para el navegador, pero lo que 
tiene en el interior si es visible, ese dependerá de la condición puesta-->
</template>
<!-- La etiqueta template en vue sirve para, poder renderizar todo el html, que nosotros necesitamos, 
en este caso en nuestro componente App.vue que va a ser toda nuestra app. 

En Vue Tenemos una técnica para trabajar que se llama single file componet(SFC), esta estructura
nos permite separar la lógica, la estructura(html) y los estilos en CSS.

**En teoría es obligatorio el template/html, ya que pues si en el html pues no se muestra nada**
-->





<style>
  h1 {
    color: red;
  }
</style>